{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/[slug]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/(?<nxtPslug>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/cookiepolicy",
      "regex": "^/cookiepolicy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cookiepolicy(?:/)?$"
    },
    {
      "page": "/faqs",
      "regex": "^/faqs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faqs(?:/)?$"
    },
    {
      "page": "/financefirst",
      "regex": "^/financefirst(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/financefirst(?:/)?$"
    },
    {
      "page": "/getinvolved",
      "regex": "^/getinvolved(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getinvolved(?:/)?$"
    },
    {
      "page": "/latest",
      "regex": "^/latest(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/latest(?:/)?$"
    },
    {
      "page": "/legal-transparency-information",
      "regex": "^/legal\\-transparency\\-information(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal\\-transparency\\-information(?:/)?$"
    },
    {
      "page": "/powertodream",
      "regex": "^/powertodream(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/powertodream(?:/)?$"
    },
    {
      "page": "/pricing",
      "regex": "^/pricing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/pricing(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/services",
      "regex": "^/services(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/services(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    },
    {
      "page": "/wingstofly",
      "regex": "^/wingstofly(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/wingstofly(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}